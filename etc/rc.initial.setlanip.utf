#!/usr/local/bin/php -f
<?php
/* $Id$ */
/*
	rc.initial.setlanip

	Copyright (C) 2013-2020 Ogun Acik
	All rights reserved.

	Copyright (C) 2003-2004 Manuel Kasper <mk@neon1.net>.
	All rights reserved.

	Redistribution and use in source and binary forms, with or without
	modification, are permitted provided that the following conditions are met:

	1. Redistributions of source code must retain the above copyright notice,
	   this list of conditions and the following disclaimer.

	2. Redistributions in binary form must reproduce the above copyright
	   notice, this list of conditions and the following disclaimer in the
	   documentation and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
	INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
	AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
	AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
	OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
	SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
	INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
	CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	POSSIBILITY OF SUCH DAMAGE.
*/

require_once('config.inc');
require_once('functions.inc');
require_once('filter.inc');
require_once('shaper.inc');

function console_get_interface_from_ppp($realif) {
	global $config;

	if (is_array($config['ppps']['ppp']) && count($config['ppps']['ppp'])) {
		foreach ($config['ppps']['ppp'] as $pppid => $ppp) {
			if ($realif == $ppp['if']) {
				$ifaces = explode(",", $ppp['ports']);
				return $ifaces[0];
			}
		}
	}

	return '';
}

function prompt_for_enable_dhcp_server() {
	global $config, $fp, $interface;
	if($interface == "wan") {
		if($config['interfaces']['lan'])
			return "n";
	}

	if (is_ipaddr($config['interfaces'][$interface]['ipaddr'])) {
		do {
			$good = false;
			$upperifname = strtoupper($interface);
			echo "\n    Do you want to enable the DHCP server on {$upperifname}? [y|n]\n    > ";
			$yn = strtolower(chop(fgets($fp)));
			if ($yn[0] == "y" or $yn[0] == "n")
			$good = true;
		} while (!$good);
	}
	return $yn;
}

$fp = fopen('php://stdin', 'r');
$addr_blank = false;

/* build an interface collection */
$ifdescrs = get_configured_interface_with_descr(false, true);
$j = count($ifdescrs);

/* grab interface that we will operate on, unless there is only one
interface */
if ($j > 1) {
	echo "    Available interfaces:\n\n";
	$x=1;
	foreach($ifdescrs as $iface) {
		echo "    {$x} - {$iface}\n";
		$x++;
	}
	echo "\n    Enter the number of the interface you wish to configure:\n    > ";
	$intnum = chop(fgets($fp));
} else {
	$intnum = $j;
}

if($intnum < 1)
	exit;
if($intnum > $j)
	exit;

$index = 1;
foreach ($ifdescrs as $ifname => $ifdesc) {
	if ($intnum == $index)  {
		$interface = $ifname;
		break;
	} else {
		$index++;
	}
}
if(!$interface) {
	echo "   Invalid interface!\n";
	exit;
}

$ifaceassigned = '';
do {
	if($interface == "wan") {
		$upperifname = strtoupper($interface);
		echo "    Configure {$upperifname} interface via DHCP?  [y|n]\n    > ";
		$intdhcp = chop(fgets($fp));
		if(strtolower($intdhcp) == "y" || strtolower($intdhcp) == "Y") {
			$ifppp = console_get_interface_from_ppp(get_real_interface("wan"));
			if (!empty($ifppp))
				$ifaceassigned = $ifppp;
			$intip = "dhcp";
			$intbits = '';
			$isintdhcp = true;
			$restart_dhcpd = true;
		}
	}

	if($isintdhcp == false or $interface <> "wan") {
		do {
			$upperifname = strtoupper($interface);
			echo "\n    Enter the new {$upperifname} IPv4 address. Press <ENTER> for none:\n    > ";
			$intip = chop(fgets($fp));
			$addr_blank = false;
		} while (!(is_ipaddr($intip) || $intip == ''));
	  	if ($intip != '') {
	  		echo "\n    Subnet masks are entered as bit counts (as in CIDR notation):\n";
	  		echo "    Ex:  255.255.255.0 = 24\n";
	  		echo "         255.255.0.0 = 16\n";
	  		echo "         255.0.0.0 = 8\n";
	  		do {
				$upperifname = strtoupper($interface);
	  			echo "\n    Enter the new {$upperifname} IPv4 subnet bit count:\n    > ";
	  			$intbits = chop(fgets($fp));
				$restart_dhcpd = true;
	  		} while (!is_numeric($intbits) || ($intbits < 1) || ($intbits > 31));
	  	}
		$ifppp = console_get_interface_from_ppp(get_real_interface($interface));
		if (!empty($ifppp))
			$ifaceassigned = $ifppp;
	}


} while ($addr_blank);

if (!empty($ifaceassigned))
	$config['interfaces'][$interface]['if'] = $ifaceassigned;

$config['interfaces'][$interface]['ipaddr'] = $intip;
$config['interfaces'][$interface]['subnet'] = $intbits;
$config['interfaces'][$interface]['enable'] = true;

if($g['services_dhcp_server_enable'])
	$yn = prompt_for_enable_dhcp_server();

if ($yn == "e") {
	do {
		echo "    Enter the START address of the client address range:\n    > ";
		$dhcpstartip = chop(fgets($fp));
		if ($dhcpstartip === "") {
			fclose($fp);
			exit(0);
		}
	} while (!(is_ipaddr($dhcpstartip)));

	do {
		echo "    Enter the END address of the client address range::\n    > ";
		$dhcpendip = chop(fgets($fp));
		if ($dhcpendip === "") {
			fclose($fp);
			exit(0);
		}
	} while (!(is_ipaddr($dhcpendip)));
	$restart_dhcpd = true;
	$config['dhcpd'][$interface]['enable'] = true;
	$config['dhcpd'][$interface]['range']['from'] = $dhcpstartip;
	$config['dhcpd'][$interface]['range']['to'] = $dhcpendip;
}
else
{
	if($config['dhcpd'][$interface])
		unset($config['dhcpd'][$interface]['enable']);
	services_dhcpd_configure();
}


if (isset($config['system']['webgui']['noantilockout'])) {
	unset($config['system']['webgui']['noantilockout']);
}

if($config['interfaces']['lan']) {
	if($config['dhcpd'])
		if($config['dhcpd']['wan'])
			unset($config['dhcpd']['wan']);
}

if(!$config['interfaces']['lan']) {
	unset($config['interfaces']['lan']);
	if($config['dhcpd']['lan'])
		unset($config['dhcpd']['lan']);
	unset($config['shaper']);
	unset($config['ezshaper']);
	unset($config['nat']);
	system("rm /var/dhcpd/var/db/* >/dev/null 2>/dev/null");
	services_dhcpd_configure();
}

$upperifname = strtoupper($interface);
echo "\n    Saving changes for {$upperifname}...";
write_config("{$interface} IP configuration from console menu");
interface_reconfigure(strtolower($upperifname));
filter_configure_sync();

if($restart_dhcpd) {
	services_dhcpd_configure();
}
if($restart_webgui) {
	echo "    Restarting Web UI...";
	mwexec("/etc/rc.restart_webgui");
}

if ($intip != '') {
	if (is_ipaddr($intip)) {
		echo "\n\n    New IPv4 address for {$upperifname}: " . "{$intip}/{$intbits}\n";
	} else {
		echo "\n\n    New IPv4 address for {$upperifname}: " . "{$intip}\n";
	}
}

echo "\n    Press <ENTER> to continue. ";

fgets($fp);
fclose($fp);

?>
